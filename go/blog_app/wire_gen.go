// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"blog_app/adapter/domain_impl/repository"
	"blog_app/adapter/handler"
	"blog_app/adapter/log"
	"blog_app/adapter/persistance/database/postgres"
	"blog_app/adapter/registry"
	"blog_app/domain/model/auth"
	"blog_app/usecase"
)

// Injectors from injector.go:

func initialize(db *postgres.DB, tokenIssuer auth.TokenIssuer, logger log.Logger) registry.Registry {
	user := repository.NewUserRepository(db)
	session := repository.NewSessionRepository(db)
	login := usecase.NewLogin(tokenIssuer, user, session, logger)
	signup := usecase.NewSignup(user)
	renewToken := usecase.NewRenewToken(tokenIssuer, session)
	authHandler := handler.NewAuthHandler(login, signup, renewToken)
	post := repository.NewPostRepository(db)
	tag := repository.NewTagRepository(db)
	comment := repository.NewCommentRepository(db)
	findPosts := usecase.NewFindPosts(post, tag, comment)
	createPost := usecase.NewCreatePost(user, tag, post)
	postHandler := handler.NewPostHandler(findPosts, createPost)
	createComment := usecase.NewCreateComment(post, comment)
	updateComment := usecase.NewUpdateComment(comment)
	deleteComment := usecase.NewDeleteComment(comment)
	commentHandler := handler.NewCommentHandler(createComment, updateComment, deleteComment)
	getTags := usecase.NewGetTags(tag)
	tagHandler := handler.NewTagHandler(getTags)
	registryRegistry := registry.NewRegistry(db, tokenIssuer, authHandler, postHandler, commentHandler, tagHandler)
	return registryRegistry
}
